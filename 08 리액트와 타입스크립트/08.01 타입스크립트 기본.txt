타입스크립트는 자바스크립트에서 Type(자료형)을 다루도록 한 것이다.
자바스크립트의 슈퍼셋(상위셋)이며 자바스크립트 문법과 표기법을 모두 그대로 사용할 수 있다.

let str: string = 'A';
let num: number = 0;
let bool: boolean = treu;

let arr1: Array<number> = [0, 1, 2];
let arr2: number[] = [0, 1, 2];

let null1: null = null;
let undefined1: undefined = undefined;

// any 타입의 경우 타입스크립트를 적용하지 않던 프로젝트에 타입스크립트를 도입할 때 any로 모두 지정하는 정도로만 사용한다.
let any1: any;
any1 = false;
any1 = 10;
any1 = undefined;


const funcA = (num: number): void => {
  ...
}
타입스크립트는 타입 추론을 하므로 함수 안에서 아무것도 return하지 않으면 자동으로 함수의 반환 타입은 void 타입이 된다.
하지만 명시적으로 void를 지정해두면 함수 안에서 return문 작성 시 에러가 발생하게 할 수 있다.

const obj: {str: string, num: number} = {
  str: "john",
  num: 10,
};


// intersection(교차) 타입
intersection은 여러 타입을 조합해 새로운 타입 정의를 만들기 위해 사용한다.
type TypeA = {
  str: string,
  num: number,
};
type TypeB = {
  str: string,
  bool: boolean,
};
type TypeC = TypeA & TypeB;

const obj: TypeC = {
  str: "john",
  num: 10,
  bool: false,
}


// union(병합,공용체) 타입
union은 여러 타입을 허용한다.
let val1: string | number = "";


// Generic
타입의 정의를 동적으로 변경할 수 있는 기능
type CustomType<T> = {
  val: T;
}
const strObj: CustomType<string> = {
  val: "test",
};

const [str, setStr] = useState<string>("");


프로젝트마다 세세한 설정은 tsconfig.json을 통해 지정한다.
tsconfig.json
// target
어떤 버전의 자바스크립트로 컴파일할 것인가를 지정
// lib
target에 지정한 버번에 존재하지 않는 기능을 사용할 때는 lib에 추가해 사용 가능
// Module
자바스크립트는 백엔드에서 사용할 때와 프론트엔드에서 사용할 때의 모듈 패턴이 다르다.
프론트엔드인 경우 module에 esnext, es2021 같은 것을 지정. 백엔드인 경우 commonjs를 지정
// jsx
JSX 구문이 어떻게 자바스크립트 파일에 출력되는지 설정
// strict
프로그램이 가능한 한 안전하게 동작하도록 타입스크립트가 권장하는 설정을 몇 가지 모아서 활성화하는 설정이고 true를 권장한다.
true 설정 시 다음 규칙이 함께 적용된다.
- alwaysStrict
- noImplicitAny
- noImplicitThis
- strictBindCallApply
- strictFunctionTypes
- strictNullChecks
- strictPropertyInitialization
...
strict를 true로 설정하고 각 항목을 개별적으로 off 가능하다.
기존 자바스크립트 프로젝트를 타입스크립트로 전환할 때 "strict": true로 설정하면 수많은 에러가 발생한다.
먼저 false로 시작해서 항목을 하나씩 대응해가는 게 이상적이다.