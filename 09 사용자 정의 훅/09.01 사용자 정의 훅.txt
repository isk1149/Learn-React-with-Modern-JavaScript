사용자 정의 훅(커스텀 훅)은 임의의 처리를 모아서 직접 훅을 만들어 구현하는 것을 말한다.
사용자 정의 훅을 사용하면 로직을 컴포넌트에서 분리하거나 여러 컴포넌트의 로직을 재사용할 수 있다.

리액트 기본 훅들 몇가지
useState
useEffect
useCallback
useMemo
useContext
useRef
useReducer
useLayoutEffect
useImperalTiveHandle
useDebugValue

사용자 정의 훅을 사용해 편의 기능이나 특정 로직(ex. 데이터 획득, 로그인 처리)을 실행하는 훅을 프로젝트에서 직접 만든다.
사용자 정의 훅의 이름도 use로 시작하게 한다.
App.tsx
const onClickFetchUsers = (): void => {
  setIsLoading(true);
  setIsError(false);

  setTimeout(() => {
    axios
      .get("https://jsonplaceholder.typicode.com/users")
      .then((result) => {
        // 성과 이름을 결합하도록 변환
        const users = result.data.map((user: User) => ({
          id: user.id,
          name: `${user.username}(${user.name})`,
          company: user.company.name,
        }));
        // 사용자 목록 state 업데이트
        setUserList(users);
      })
      .catch(() => setIsError(true))
      .finally(() => setIsLoading(false));
  }, 1000);
};

  ...

div>
  <button onClick={onClickFetchUsers}>사용자 정보 얻기</button>
  {/* 에러 발생 시 에러 메시지 표시 */}
  {isError && <p style={{ color: "red" }}>에러가 발생했습니다.</p>}
  {/* 로딩 중에는 표시 전환 */}
  {isLoading ? (
    <p>데이터를 가져오고 있습니다.</p>
  ) : (
    userList.map((user) => (
      <p key={user.id}>{`${user.id}: ${user.name}[${user.company}]`}</p>
    ))
  )}
</div>

onClickFetchUsers 함수 안에서 플래그 설정이나 데이터 취득, 변환을 하기 때문에 컴포넌트 코드양이 증가한다.
본래 컴포넌트의 책임은 부여된 데이터에 기반해 화면의 형태를 구축하는 것이므로 복잡한 로직 부분은 분리하는 것이 좋다.

그리고 다른 컴포넌트에서 같은 형태의 사용자 목록 취득을 구현한다면 onClickFetchUsers 함수의 내용을 모두 복붙해야 한다.
이려면 이후 로직 변경 시 모든 코드를 찾아 수정해야 한다.
이런 코드를 개선하기 위한 사용자 정의 훅을 알아본다.